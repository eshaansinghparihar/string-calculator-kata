{
  "numFailedTestSuites": 0,
  "numFailedTests": 0,
  "numPassedTestSuites": 1,
  "numPassedTests": 20,
  "numPendingTestSuites": 0,
  "numPendingTests": 0,
  "numRuntimeErrorTestSuites": 0,
  "numTodoTests": 0,
  "numTotalTestSuites": 1,
  "numTotalTests": 20,
  "openHandles": [],
  "snapshot": {
    "added": 0,
    "didUpdate": false,
    "failure": false,
    "filesAdded": 0,
    "filesRemoved": 0,
    "filesRemovedList": [],
    "filesUnmatched": 0,
    "filesUpdated": 0,
    "matched": 0,
    "total": 0,
    "unchecked": 0,
    "uncheckedKeysByFile": [],
    "unmatched": 0,
    "updated": 0
  },
  "startTime": 1741610661782,
  "success": false,
  "testResults": [
    {
      "leaks": false,
      "numFailingTests": 0,
      "numPassingTests": 20,
      "numPendingTests": 0,
      "numTodoTests": 0,
      "openHandles": [],
      "perfStats": {
        "end": 1741610662517,
        "runtime": 612,
        "slow": false,
        "start": 1741610661905
      },
      "skipped": false,
      "snapshot": {
        "added": 0,
        "fileDeleted": false,
        "matched": 0,
        "unchecked": 0,
        "uncheckedKeys": [],
        "unmatched": 0,
        "updated": 0
      },
      "testFilePath": "/home/eshaansinghparihar/TDD/string-calculator-kata/tests/stringCalculator.test.js",
      "testResults": [
        {
          "ancestorTitles": [
            "First Test"
          ],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "First Test test for nothing",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "test for nothing"
        },
        {
          "ancestorTitles": [
            "Test for known amount of numbers"
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Test for known amount of numbers empty string should return 0",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "empty string should return 0"
        },
        {
          "ancestorTitles": [
            "Test for known amount of numbers"
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Test for known amount of numbers should return 1 for \"1\"",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 1 for \"1\""
        },
        {
          "ancestorTitles": [
            "Test for known amount of numbers"
          ],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Test for known amount of numbers should return 2 for \"2,\"",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 2 for \"2,\""
        },
        {
          "ancestorTitles": [
            "Test for known amount of numbers"
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Test for known amount of numbers should return 6 for \"1,5",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 6 for \"1,5"
        },
        {
          "ancestorTitles": [
            "Test for unknown amount of numbers"
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Test for unknown amount of numbers should work for unknown anount of numbers",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should work for unknown anount of numbers"
        },
        {
          "ancestorTitles": [
            "Test to handle new lines between numbers"
          ],
          "duration": 0,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Test to handle new lines between numbers should return 6 for 1\n2,3",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 6 for 1\n2,3"
        },
        {
          "ancestorTitles": [
            "Test to handle supported delimeter"
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Test to handle supported delimeter should return 3 for //;\n1;2",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 3 for //;\n1;2"
        },
        {
          "ancestorTitles": [
            "Test to handle supported delimeter"
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Test to handle supported delimeter should work for delimeters of any length",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should work for delimeters of any length"
        },
        {
          "ancestorTitles": [
            "Test to handle negative numbers"
          ],
          "duration": 29,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Test to handle negative numbers should throw exception for \"-2,\"",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw exception for \"-2,\""
        },
        {
          "ancestorTitles": [
            "Test to handle negative numbers"
          ],
          "duration": 14,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Test to handle negative numbers should throw exception for \"1,-5",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw exception for \"1,-5"
        },
        {
          "ancestorTitles": [
            "Test to handle negative numbers"
          ],
          "duration": 3,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Test to handle negative numbers should throw exception for //;\n1;-2",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw exception for //;\n1;-2"
        },
        {
          "ancestorTitles": [
            "Test to handle negative numbers"
          ],
          "duration": 5,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Test to handle negative numbers should throw exception work //:;:\n1:;:-2:;:-3:;:4:;: to handle delimeters of any length",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should throw exception work //:;:\n1:;:-2:;:-3:;:4:;: to handle delimeters of any length"
        },
        {
          "ancestorTitles": [
            "Test to ignore numbers greater than 1000"
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Test to ignore numbers greater than 1000 should return 2 for 2,1001",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 2 for 2,1001"
        },
        {
          "ancestorTitles": [
            "Test to ignore numbers greater than 1000"
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Test to ignore numbers greater than 1000 should return 1002 for 2,1000",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 1002 for 2,1000"
        },
        {
          "ancestorTitles": [
            "Test to handle delimeters of any length"
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Test to handle delimeters of any length should return 6 for //[***]\n1***2***3",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 6 for //[***]\n1***2***3"
        },
        {
          "ancestorTitles": [
            "Test to handle delimeters of any length"
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Test to handle delimeters of any length should return 6 for //[:;:;:]\n1:;::;2:;:;:3",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 6 for //[:;:;:]\n1:;::;2:;:;:3"
        },
        {
          "ancestorTitles": [
            "Test to handle multiple delimeters"
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Test to handle multiple delimeters should return 6 for //[*][%]\n1*2%3",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 6 for //[*][%]\n1*2%3"
        },
        {
          "ancestorTitles": [
            "Test to handle multiple delimeters of length greater than one char"
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Test to handle multiple delimeters of length greater than one char should return 6 for //[***][::]\n1***2::3",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 6 for //[***][::]\n1***2::3"
        },
        {
          "ancestorTitles": [
            "Test to handle multiple delimeters of length greater than one char"
          ],
          "duration": 1,
          "failureDetails": [],
          "failureMessages": [],
          "fullName": "Test to handle multiple delimeters of length greater than one char should return 6 for //[***][::][;]\n1***2::3;4",
          "invocations": 1,
          "location": null,
          "numPassingAsserts": 1,
          "retryReasons": [],
          "status": "passed",
          "title": "should return 6 for //[***][::][;]\n1***2::3;4"
        }
      ],
      "failureMessage": null
    }
  ],
  "wasInterrupted": false
}